<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>TinyVG</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <div class="body">
      <a href="index.htm" style="float: right">[Back to main]</a>
      <h1>Benchmark Results</h1>
  
      <p><b>Note:</b> The SVG converter isn't perfect and SVG is a horribly complex format. Thus, data might be converted invalidly and rendered wrong. This is a drawback of this benchmark and disturbs the data. A lot of images are still converted correctly and thus the data is still published.</p>

      <h2>Summarized Results</h2>

      <p>The benchmark shows that the compression rate from TinyVG compared to SVG lies between 20% and 50% and thus always is a net benefit over SVG.</p>

      <table class="benchmark">
        <tr>
          <th>Dataset</th>
          <th>File Count</th>
          <th>Compression Rate (TVG/SVG)</th>
          <th>Average TVG Size</th>
          <th>Average SVG Size</th>
        </tr>
        <tr><th>Overall</th>              <td>2129</td><td>46,38%</td><td>3,224</td><td>10,194</td></tr>
        <tr><th>Material Design Icons</th><td>1000</td><td>51,47%</td><td>220</td><td>428</td></tr>
        <tr><th>Papirus</th>              <td>1000</td><td>47,20%</td><td>841</td><td>1.783</td></tr>
        <tr><th>W3C</th>                  <td>115</td> <td>53,18%</td><td>301</td><td>567</td></tr>
        <tr><th>FreeSVG</th>              <td>5</td>   <td>29,72%</td><td>12,315</td><td>41.435</td></tr>
        <tr><th>Zig</th>                  <td>9</td>   <td>36,15%</td><td>2.443</td><td>6.759</td></tr>
      </table>

      <p><a href="https://docs.google.com/spreadsheets/d/1U9yqYIq0k9TjTr3FXP12Gbd1arvUir0iLAl6R54KQQI/edit?usp=sharing">You can find the data evaluation here</a></p>

      <h2>Process</h2>

      <p>To create a comparable data set, a <a href="https://github.com/MasterQ32/TinyVG/blob/master/benchmark/bench-from-svg.sh">script</a> was created which does the following process:</p>
      <ol>
        <li>Optimize the input SVG with <a href="https://github.com/svg/svgo">SVGO</a> to have comparably small files</li>
        <li>Convert SVG to TinyVG text</li>
        <li>Convert TinyVG text to TinyVG binary</li>
        <li>Render TinyVG binary to PNG file</li>
        <li>Render TinyVG binary to SVG file</li>
        <li>Optimize the output SVG with to have comparably small files</li>
      </ol>
      <p>If step 2 fails, we will skip the file as we cannot perfom comparison.</p>

      <p>The outputs of step 1, 4 and 6 are displayed in the comparison rendering, the outputs of step 1 and 3 are compared in the benchmark.</p>

      <h2>Datasets</h2>

      Each dataset has a CSV list with Filename, SVG and TVG Size as well as a comparison rendering which contains the file name, the original SVG rendered by chrome, a PNG rendered from the generated TVG file, and a SVG generated from the TVG file.

      <h3><a href="https://github.com/Templarian/MaterialDesign">Material Design Icons</a></h3>
      <p>This dataset mostly contains single-path icons with otherwise identical files. The result here documents the raw path compression.</p>
      <p>For the benchmark, the first 1000 successfully converted icons are compared, while 437 icons were skipped in the process. This means that we have roughly 70% conversion success rate.</p>

      <ul>
        <li><a href="benchmark/material-design.csv">Result Data</a></li>
        <li><a href="benchmark/material-design.pdf">Comparison Rendering</a></li>
      </ul>

      <h3><a href="https://github.com/PapirusDevelopmentTeam/papirus-icon-theme">Papirus</a></h3>
      <p>This icon theme was chosen as a colorful alternative to the <i>Material Design Icons</i> and proved itself as a wild hodgepodge of very different SVG files.</p>
      <p>For the benchmark, the first 1000 successfully converted icons are compared, while 250 icons were skipped in the process. This means that we have roughly 80% conversion success rate.</p>

      <ul>
        <li><a href="benchmark/papirus.csv">Result Data</a></li>
        <li><a href="benchmark/papirus.pdf">Comparison Rendering</a></li>
      </ul>

      <h3><a href="https://dev.w3.org/SVG/tools/svgweb/samples/svg-files/">W3C</a></h3>
      <p>This dataset is provided by the W3C and contains a lot of files that exercise what a SVG renderer can do. A lot of these files isn't even rendered correctly by modern day browsers.</p>

      <ul>
        <li><a href="benchmark/w3c.csv">Result Data</a></li>
        <li><a href="benchmark/w3c.pdf">Comparison Rendering</a></li>
      </ul>
      
      <h3><a href="https://freesvg.org/">freesvg.org</a></h3>
      <p>This dataset contains some random images from freesvg.org. They were chosen by <a href="https://random-projects.net/">xq</a>, the initiator of this project at his liking.</p>

      <ul>
        <li><a href="benchmark/freesvg.csv">Result Data</a></li>
        <li><a href="benchmark/freesvg.pdf">Comparison Rendering</a></li>
      </ul>

      <h3><a href="https://github.com/ziglang/logo">Zig</a></h3>
      <p>This dataset is chosen as Zig is the primary programming language TinyVG was implemented with. It contains some logos and two drawings that exercise both layering and path complexity.</p>

      <ul>
        <li><a href="benchmark/zig.csv">Result Data</a></li>
        <li><a href="benchmark/zig.pdf">Comparison Rendering</a></li>
      </ul>

    </div>
    <div class="page-end-spacer"></div>
  </body>
</html>
